{"version":3,"sources":["redux/contacts/actions.js","service/contactsApi.js","redux/contacts/operations.js","redux/contacts/reducers.js","redux/store.js","redux/contacts/selectors.js","Components/ContactForm/ContactForm.js","Components/Filter/Filter.js","Components/ContactList/ContactList.js","Components/Loader/Loader.js","Components/ContactItem/ContactItem.js","App.js","index.js"],"names":["filterValue","createAction","BASE_URL","fetchContacts","a","axios","get","data","sort","b","name","localeCompare","addContact","contact","post","deleteContact","id","delete","createAsyncThunk","_","rejectWithValue","contactsApi","contacts","contactFilter","createReducer","payload","slicedContacts","createSlice","initialState","isLoading","error","extraReducers","fulfilled","state","pending","rejected","filter","contactReducer","combineReducers","store","configureStore","reducer","getContacts","getFilter","getFilteredContacts","normalizedFilter","toLowerCase","includes","ContactForm","useState","setName","number","setNumber","dispatch","useDispatch","useSelector","nameId","shortid","numberId","resetForm","className","onSubmit","e","preventDefault","contactObj","map","alert","htmlFor","type","value","onChange","target","pattern","title","required","Filter","ContactList","children","Loader","ContactItem","contactsList","useEffect","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a263f952.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit'\n\n// export const addContact = createAction('contact/add')\n// export const deleteContact = createAction('contact/delete')\nexport const filterValue = createAction('filter/value')\n","import axios from 'axios'\r\n\r\nconst BASE_URL = 'https://61a36bfbd5e8330017291ff2.mockapi.io/api/v1/'\r\n\r\nexport const fetchContacts = async () => {\r\n  let { data } = await axios.get(`${BASE_URL}/contacts`)\r\n  return data.sort((a, b) => a.name.localeCompare(b.name))\r\n}\r\n\r\nexport const addContact = async (contact) => {\r\n  let { data } = await axios.post(`${BASE_URL}/contacts`, contact)\r\n  return data\r\n}\r\n\r\nexport const deleteContact = async (id) => {\r\n  await axios.delete(`${BASE_URL}/contacts/${id}`)\r\n  return id\r\n}\r\n","import { createAsyncThunk } from '@reduxjs/toolkit'\r\nimport * as contactsApi from 'service/contactsApi'\r\n\r\nexport const fetchContacts = createAsyncThunk(\r\n  'contacts/fetchContacts',\r\n  async (_, { rejectWithValue }) => {\r\n    try {\r\n      const contacts = await contactsApi.fetchContacts()\r\n      return contacts\r\n    } catch (error) {\r\n      rejectWithValue(error)\r\n    }\r\n  }\r\n)\r\n\r\nexport const addContact = createAsyncThunk(\r\n  'contacts/addContact',\r\n  async (contact, { rejectWithValue }) => {\r\n    try {\r\n      return await contactsApi.addContact(contact)\r\n    } catch (error) {\r\n      rejectWithValue(error)\r\n    }\r\n  }\r\n)\r\n\r\nexport const deleteContact = createAsyncThunk(\r\n  'contacts/deleteContact',\r\n  async (id, { rejectWithValue }) => {\r\n    try {\r\n      return await contactsApi.deleteContact(id)\r\n    } catch (error) {\r\n      rejectWithValue(error)\r\n    }\r\n  }\r\n)\r\n","import { createReducer } from '@reduxjs/toolkit'\nimport { filterValue } from './actions'\nimport { fetchContacts, addContact, deleteContact } from './operations'\nimport { createSlice } from '@reduxjs/toolkit'\n\n// export const contactsList = createReducer([], {\n//   [addContact]: (state, { payload }) => [...state, payload],\n//   [deleteContact]: (state, { payload }) =>\n//     state.filter((contact) => contact.id !== payload),\n// })\n\nexport const contactFilter = createReducer('', {\n  [filterValue]: (_, { payload }) => payload,\n})\n\n// export const contacts = createReducer([], {\n//   [fetchContacts.fulfilled]: (_, { payload }) => payload,\n//   [addContact.fulfilled]: (state, { payload }) => [...state, payload],\n//   [deleteContact.fulfilled]: (state, { payload }) =>\n//     state.filter((contact) => contact.id !== payload),\n// })\n\n// export const isLoading = createReducer(false, {\n//   [fetchContacts.pending]: () => true,\n//   [fetchContacts.fulfilled]: () => false,\n//   [fetchContacts.rejected]: () => false,\n//   [addContact.pending]: () => true,\n//   [addContact.fulfilled]: () => false,\n//   [addContact.rejected]: () => false,\n//   [deleteContact.pending]: () => true,\n//   [deleteContact.fulfilled]: () => false,\n//   [deleteContact.rejected]: () => false,\n// })\n\n// export const error = createReducer(null, {\n//   [fetchContacts.rejected]: (_, { payload }) => payload,\n//   [fetchContacts.pending]: () => null,\n//   [fetchContacts.fulfilled]: () => null,\n//   [addContact.rejected]: (_, { payload }) => payload,\n//   [addContact.pending]: () => null,\n//   [addContact.fulfilled]: () => null,\n//   [deleteContact.rejected]: (_, { payload }) => payload,\n//   [deleteContact.pending]: () => null,\n//   [deleteContact.fulfilled]: () => null,\n// })\n\nconst slicedContacts = createSlice({\n  name: 'contacts',\n  initialState: {\n    contacts: [],\n    isLoading: false,\n    error: null,\n  },\n  extraReducers: {\n    [fetchContacts.fulfilled]: (state, { payload }) => {\n      return {\n        ...state,\n        isLoading: false,\n        contacts: [...state.contacts, ...payload],\n      }\n    },\n    [fetchContacts.pending]: (state) => {\n      return {\n        ...state,\n        isLoading: true,\n      }\n    },\n    [fetchContacts.rejected]: (state, { payload }) => {\n      return {\n        ...state,\n        isLoading: false,\n        error: payload,\n      }\n    },\n    [addContact.fulfilled]: (state, { payload }) => {\n      return {\n        ...state,\n        isLoading: false,\n        contacts: [...state.contacts, payload],\n      }\n    },\n    [addContact.pending]: (state) => {\n      return {\n        ...state,\n        isLoading: true,\n      }\n    },\n    [addContact.rejected]: (state, { payload }) => {\n      return {\n        ...state,\n        isLoading: false,\n        error: payload,\n      }\n    },\n    [deleteContact.fulfilled]: (state, { payload }) => {\n      return {\n        ...state,\n        isLoading: false,\n        contacts: state.contacts.filter((contact) => contact.id !== payload),\n      }\n    },\n    [deleteContact.pending]: (state) => {\n      return {\n        ...state,\n        isLoading: true,\n      }\n    },\n    [deleteContact.rejected]: (state, { payload }) => {\n      return {\n        ...state,\n        isLoading: false,\n        error: payload,\n      }\n    },\n  },\n})\n\nexport default slicedContacts.reducer\n","import { configureStore } from '@reduxjs/toolkit'\nimport { combineReducers } from 'redux'\nimport { contactFilter } from './contacts/reducers'\nimport slicedContacts from './contacts/reducers'\n\n// import {\n//   persistStore,\n//   persistReducer,\n//   FLUSH,\n//   REHYDRATE,\n//   PAUSE,\n//   PERSIST,\n//   PURGE,\n//   REGISTER,\n// } from 'redux-persist'\n\n// import storage from 'redux-persist/lib/storage'\n\n// const persistConfig = {\n//   key: 'contacts',\n//   version: 1,\n//   storage,\n//   blacklist: ['filter'],\n// }\n\nconst contactReducer = combineReducers({\n  contacts: slicedContacts,\n  filter: contactFilter,\n})\n\n// const persistedContactReducer = persistReducer(persistConfig, contactReducer)\n\nexport const store = configureStore({\n  reducer: contactReducer,\n\n  // middleware: (getDefaultMiddleware) =>\n  //   getDefaultMiddleware({\n  //     serializableCheck: {\n  //       ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n  //     },\n  //   }),\n\n  // devTools: process.env.NODE_ENV === 'development',\n})\n\n// export const persistor = persistStore(store)\n","export const getContacts = (state) => state.contacts.contacts\n\nexport const getFilter = (state) => state.filter\n\nexport const getFilteredContacts = (state) => {\n  const contacts = getContacts(state)\n  const filter = getFilter(state)\n  const normalizedFilter = filter.toLowerCase()\n  return contacts.filter((contact) =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  )\n}\n","import { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport shortid from 'shortid'\nimport { addContact } from 'redux/contacts/operations'\nimport { getContacts } from 'redux/contacts/selectors'\nimport './ContactForm.css'\n\nfunction ContactForm() {\n  const [name, setName] = useState('')\n  const [number, setNumber] = useState('')\n\n  const dispatch = useDispatch()\n  const contacts = useSelector(getContacts)\n\n  let nameId = shortid()\n  let numberId = shortid()\n\n  const handleChangeName = (e) => {\n    setName(e.target.value)\n  }\n\n  const handleChangeNumber = (e) => {\n    setNumber(e.target.value)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n\n    const contactObj = {\n      id: shortid(),\n      name,\n      number,\n    }\n\n    if (contacts.map((contact) => contact.name).includes(contactObj.name)) {\n      alert(`${contactObj.name} is already in contacts`)\n    } else {\n      dispatch(addContact(contactObj))\n    }\n    resetForm()\n  }\n\n  const resetForm = () => {\n    setName('')\n    setNumber('')\n  }\n\n  return (\n    <form className='contact-form' onSubmit={handleSubmit}>\n      <label className='label' htmlFor={nameId}>\n        Enter name\n      </label>\n      <input\n        id={nameId}\n        type='text'\n        className='input'\n        name='name'\n        value={name}\n        onChange={handleChangeName}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n      />\n      <label className='label' htmlFor={numberId}>\n        Enter number\n      </label>\n      <input\n        id={numberId}\n        type='tel'\n        className='input'\n        name='number'\n        value={number}\n        onChange={handleChangeNumber}\n        pattern='\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}'\n        title='Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +'\n        required\n      />\n      <button type='submit' className='contact-button'>\n        Add contact\n      </button>\n    </form>\n  )\n}\n\nexport default ContactForm\n","import { useSelector, useDispatch } from 'react-redux'\nimport { getFilter } from 'redux/contacts/selectors'\nimport { filterValue } from 'redux/contacts/actions'\nimport './Filter.css'\n\nconst Filter = () => {\n  const value = useSelector(getFilter)\n  const dispatch = useDispatch()\n\n  return (\n    <div className='filter-container'>\n      <label className='label' htmlFor='filter'>\n        Find contacts by name\n      </label>\n      <input\n        className='input'\n        id='filter'\n        type='text'\n        name='filter'\n        value={value}\n        onChange={(e) => dispatch(filterValue(e.target.value))}\n      />\n    </div>\n  )\n}\n\nexport default Filter\n","import './ContactList.css'\n\nconst ContactList = ({ children }) => {\n  return <ul className='contact-list'>{children}</ul>\n}\n\nexport default ContactList\n","import './Loader.css'\r\n\r\nexport const Loader = () => {\r\n  return (\r\n    <div className='lds-default'>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n    </div>\r\n  )\r\n}\r\n","import { useSelector, useDispatch } from 'react-redux'\nimport { deleteContact } from 'redux/contacts/operations'\nimport { getFilteredContacts } from 'redux/contacts/selectors'\nimport { useEffect } from 'react'\nimport { fetchContacts } from 'redux/contacts/operations'\nimport { Loader } from 'Components/Loader/Loader'\nimport './ContactItem.css'\n\nconst ContactItem = () => {\n  const contactsList = useSelector(getFilteredContacts)\n  const isLoading = useSelector((state) => state.contacts.isLoading)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(fetchContacts())\n  }, [dispatch])\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {contactsList.map(({ id, name, number }) => (\n        <li key={id}>\n          {name}: {number}\n          <button\n            type='button'\n            className='delete-button'\n            onClick={() => dispatch(deleteContact(id))}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </>\n  )\n}\n\nexport default ContactItem\n","import ContactForm from 'Components/ContactForm/ContactForm'\nimport Filter from 'Components/Filter/Filter'\nimport ContactList from 'Components/ContactList/ContactList'\nimport ContactItem from 'Components/ContactItem/ContactItem'\nimport 'App.css'\n\nfunction App() {\n  return (\n    <div className='App'>\n      <h1>Phonebook</h1>\n      <div className='phonebook-wrapper'>\n        <div className='contact-form-wrapper'>\n          <ContactForm />\n        </div>\n        <div className='contacts-wrapper'>\n          <h2 className='isHidden'>Contacts</h2>\n          <Filter />\n          <ContactList>\n            <ContactItem />\n          </ContactList>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { store, persistor } from 'redux/store'\nimport { Provider } from 'react-redux'\n// import { PersistGate } from 'redux-persist/integration/react'\nimport 'index.css'\nimport App from 'App'\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <PersistGate persistor={persistor}> */}\n    <Provider store={store}>\n      <App />\n    </Provider>\n    {/* </PersistGate> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}